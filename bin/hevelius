#!/usr/bin/env python3

"""
Provides command line interface to the Hevelius project.
"""

import sys
import argparse

sys.path.append(".")

# pylint: disable=wrong-import-position
from hevelius.cmd_basic import db_version, hevelius_version, config_show, backup
from hevelius.cmd_stats import stats, histogram_show, groups
from hevelius.cmd_db_migrate import migrate
from hevelius.cmd_repo import repo
from hevelius.cmd_catalog import catalog, format_get


def run():
    """
    Parses command line arguments and runs the appropriate command.
    """

    parser = argparse.ArgumentParser("hevelius")
    subparsers = parser.add_subparsers(help="commands", dest="command")

    subparsers.add_parser('config', help="Shows current Hevelius (DB,file repository) configuration.")
    subparsers.add_parser('version', help="Shows the current Hevelius version.")

    db_parser = subparsers.add_parser('db', help="Manages database")
    db_subparsers = db_parser.add_subparsers(help="Commands related to database", dest="db_command")
    db_subparsers.add_parser('version', help="Shows the current DB schema version.")  # version_parser
    db_subparsers.add_parser('backup', help="Generates DB backup.")  # backup_parser
    migrate_parser = db_subparsers.add_parser('migrate', help="Migrate to the latest DB schema")
    migrate_parser.add_argument("-t", "--dry-run", help="Don't do the actual DB upsert", action='store_true')
    db_subparsers.add_parser('stats', help="Show database statistics")  # stats_parser

    repo_parser = subparsers.add_parser('repo', help="Manages files repository on local storage.")
    repo_parser.add_argument('-f', "--file", help="Reads a single FITS file", type=str)
    repo_parser.add_argument("-l", "--list", help="Reads a list of FITS files (one filename per line)", type=str)
    repo_parser.add_argument("-d", "--dir",   help="Reads all FITS files recursively", type=str)
    repo_parser.add_argument("-s", "--show-header", help="Displays all entries in FITS header", action='store_true')
    repo_parser.add_argument("-t", "--dry-run", help="Don't do the actual DB upsert", action='store_true')
    repo_parser.add_argument("--sanity-db", help="Goes through the list of tasks in a database and checks if all files are present", action='store_true')
    repo_parser.add_argument("--sanity-files", help="Goes through the list of files and check if related tasks are present", action='store_true')
    repo_parser.add_argument("--min-task-id", help="Minimum task ID to check (for sanity-db)", type=int)
    repo_parser.add_argument("--max-task-id", help="Maximum task ID to check (for sanity-db)", type=int)
    repo_parser.add_argument("--delete-invalid", help="Delete invalid tasks (no filename or missing file) when using sanity-db", action='store_true')

    data_parser = subparsers.add_parser('data', help="Explores, analyses and digs through available data (data mining)")
    data_subparsers = data_parser.add_subparsers(help="Commands related to data", dest="data_command")
    data_subparsers.add_parser('distrib', help="Shows photos distribution")  # distrib_parser
    groups_parser = data_subparsers.add_parser('groups', help="Shows frames' groups")
    groups_parser.add_argument("-m", "--min", help="Minimum number of frames in a group", type=int, default=200)

    # Default values set to the first Messier object
    catalog_parser = data_subparsers.add_parser('catalog', help="Finds astronomical objects in a catalog")
    catalog_parser.add_argument('-r', "--ra", help="Right Ascension (HH MM [SS] format)", type=str, default="05 34 31")
    catalog_parser.add_argument('-d', "--decl", help="Declination of the image searched (+DD MM SS format)", type=str, default="+22 00 52")
    catalog_parser.add_argument('-p', "--proximity", help="radius of an area to look at (in degrees)", type=float, default=1.0)
    catalog_parser.add_argument('-f', "--format", help="format of the frames list output: none, filenames, csv, brief, full", type=format_get, default="brief")
    catalog_parser.add_argument('-o', "--object", help="catalog object to look for", type=str, default="")
    catalog_parser.add_argument('-b', "--bin", help="filtering: binning of the frames to look for (1..4, 0 means any)", type=int, default=0)
    catalog_parser.add_argument("--focal", help="filtering: focal length (mm)", type=int, default=0)
    catalog_parser.add_argument("--resx", help="filtering: X resolution (pixels)", type=int, default=0)
    catalog_parser.add_argument("--resy", help="filtering: y resolution (pixels)", type=int, default=0)
    catalog_parser.add_argument("--sensor", help="filtering: specifies sensor by its name (name in sensors table)", type=str, default="")
    catalog_parser.add_argument("--sensor-id", help="filtering: specifies sensor by its id (sensor_id in sensors table)", type=int, default=0)

    args = parser.parse_args()

    # db commands: version, migrate, backup, stats
    if args.command == "db":
        if args.db_command == "version":
            return db_version()  # see cmd_basic.py
        if args.db_command == "migrate":
            return migrate(args)  # see cmd_db_migrate.py
        if args.db_command == "backup":
            return backup(args)  # see cmd_backup.py
        if args.db_command == "stats":
            return stats()  # see cmd_stats.py
        return parser.print_help()
    if args.command == "data":
        if args.data_command == "distrib":
            return histogram_show(args)  # see cmd_stats.py
        if args.data_command == "groups":
            return groups(args)  # see cmd_stats.py
        if args.data_command == "catalog":
            return catalog(args)  # see cmd_catalog.py
        return parser.print_help()
    if args.command == "config":
        return config_show()  # see cmd_basic.py
    if args.command == "repo":
        return repo(args)  # see cmd_repo.py
    if args.command == "version":
        return version()
    return parser.print_help()


def version():
    """
    Prints the version of the Hevelius project.
    """
    print(f"Hevelius {hevelius_version()}")


if __name__ == '__main__':
    run()
